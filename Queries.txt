--Data type of all columns in the "customers" table.
SELECT
 column_name
 ,data_type
FROM
 dsml-may-23-beg.Target_Case_Study.INFORMATION_SCHEMA.COLUMNS
WHERE
 table_name = 'customers'

--Get the time range between which the orders were placed.
SELECT
  MIN(order_purchase_timestamp) as start_time
 ,MAX(order_purchase_timestamp) AS end_time
FROM
  `Target_Case_Study.orders`

--Count the number of Cities and States in our dataset.
SELECT
  COUNT(DISTINCT customer_city) AS Customer_City_Count
 ,COUNT(DISTINCT customer_state) AS Customer_State_Count
FROM `Target_Case_Study.customers`

SELECT
  COUNT(DISTINCT geolocation_city)   AS Total_City
 ,COUNT(DISTINCT geolocation_state)  AS Total_State
FROM `Target_Case_Study.geolocation`

--Zip Codes where Customers are not present
SELECT
  Distinct geolocation_zip_code_prefix AS Zipcodes_need_to_focus_to_expand_business
FROM `Target_Case_Study.geolocation` Geo
LEFT JOIN `Target_Case_Study.customers` C ON C.customer_zip_code_prefix = Geo.geolocation_zip_code_prefix
where customer_zip_code_prefix is null

--Missing Zip Codes in geolocation 
select distinct geolocation_zip_code_prefix
FROM `Target_Case_Study.geolocation`
where geolocation_zip_code_prefix IN ((Select distinct customer_zip_code_prefix
                                       FROM `Target_Case_Study.customers`
                                       where customer_zip_code_prefix NOT IN (SELECT Distinct geolocation_zip_code_prefix
                                                                              FROM `Target_Case_Study.geolocation` Geo
                                                                              LEFT JOIN `Target_Case_Study.customers` C ON C.customer_zip_code_prefix = Geo.geolocation_zip_code_prefix
                                                                              where customer_zip_code_prefix is not null))
)

--Is there a growing trend in the no. of orders placed over the past years?
SELECT
 Purchase_year
 ,Count(order_id) AS CountOfOrders
 ,CONCAT(ROUND((Count(order_id)/(LAG(Count(order_id))OVER(ORDER BY Count(order_id) ASC))-1)*100,2)," %") as YoY_GrowthOnOrders_Count
FROM
(select 
  DISTINCT O.order_id
 ,order_purchase_timestamp
 ,EXTRACT(YEAR FROM order_purchase_timestamp) as Purchase_year
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.order_items` OI ON OI.order_id =O.order_id)
GROUP BY Purchase_year
ORDER BY Purchase_year ASC

--Can we see some kind of monthly seasonality in terms of the no. of orders being placed ?
SELECT Purchase_month_name,CountOfOrders,avg_ords
FROM
(SELECT
  Purchase_month_name
 ,Count(order_id) AS CountOfOrders
 ,AVG(Count(order_id))OVER(PARTITION BY Purchase_month ) as avg_ords
FROM
(select 
  DISTINCT O.order_id
 ,order_purchase_timestamp
 ,EXTRACT(YEAR FROM order_purchase_timestamp) as Purchase_year
 ,format_datetime("%b %y",order_purchase_timestamp) as Purchase_month_name
 ,EXTRACT(MONTH FROM order_purchase_timestamp) as Purchase_month
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.order_items` OI ON OI.order_id =O.order_id)
GROUP BY Purchase_month_name,Purchase_month,Purchase_year
ORDER BY Purchase_year,Purchase_month)
ORDER BY avg_ords DESC

--During what time of the day, do the Brazilian customers mostly place their orders? (Dawn, Morning, Afternoon or Night)
SELECT  order_time,count(order_id) AS CountOfOrders
FROM
(SELECT *
,CASE WHEN EXTRACT(Hour from order_purchase_timestamp) >= 0 AND EXTRACT(Hour from order_purchase_timestamp) <= 6
     THEN 'Dawn'
     WHEN EXTRACT(Hour from order_purchase_timestamp) >= 7 AND EXTRACT(Hour from order_purchase_timestamp) <= 12
     THEN 'Mornings'
     WHEN EXTRACT(Hour from order_purchase_timestamp) >= 13 AND EXTRACT(Hour from order_purchase_timestamp) <= 18
     THEN 'Afternoon'
     WHEN EXTRACT(Hour from order_purchase_timestamp) >= 19 AND EXTRACT(Hour from order_purchase_timestamp) <= 23
     THEN 'Night'
     END AS order_time
FROM `Target_Case_Study.orders`
ORDER BY order_purchase_timestamp)
GROUP BY order_time

--Get the month on month no. of orders placed in each state.
SELECT
 customer_state
 ,Purchase_year
,purchase_month
,Count(order_id) AS CountOfOrders
,CONCAT(ROUND((Count(order_id)/(LAG(Count(order_id))OVER(PARTITION BY customer_state,Purchase_year ORDER BY Purchase_year,purchase_month ASC))-1)*100,2)," %") as MoM_GrowthOnOrders
FROM
(select
 DISTINCT O.order_id
,order_purchase_timestamp
,EXTRACT(YEAR FROM order_purchase_timestamp) as Purchase_year
,EXTRACT(Month FROM order_purchase_timestamp) as Purchase_month
,customer_state
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.order_items` OI ON OI.order_id =O.order_id
LEFT JOIN `Target_Case_Study.customers` C ON C.customer_id = O.customer_id)
GROUP BY customer_state,purchase_month,purchase_year
ORDER BY customer_state,purchase_year,purchase_month

--State wise Seller and Order count
SELECT customer_state,CntOrders,IF(sellerCnt is null,0,sellerCnt) as SellerCnt
FROM
(select customer_state,count(order_id) as CntOrders
from `Target_Case_Study.orders` O
left join `Target_Case_Study.customers` C ON C.customer_id = O.customer_id
group by customer_state) C
LEFT JOIN (SELECT seller_state,count(seller_id) as sellerCnt
FROM `Target_Case_Study.sellers`
group by seller_state) SS ON SS.seller_state = C.customer_state
order by CntOrders DESC

--State Wise Customer Distribution
SELECT
customer_state
,count(customer_id) as Customer_Count
,CONCAT(ROUND((count(customer_id)/(select count(Distinct customer_id) FROM `Target_Case_Study.customers`))*100,2),"%") AS Customer_State_Wise_Distribution
FROM `Target_Case_Study.customers` C
GROUP BY customer_state
ORDER BY Customer_Count DESC

--Total Customers
SELECT COUNT(Distinct customer_unique_id) FROM `Target_Case_Study.customers`

--Repeating Customers
SELECT  customer_unique_id AS Repeating_customer_unique_id
FROM `Target_Case_Study.customers`
GROUP BY customer_unique_id
HAVING COUNT(customer_id) > 1

--Count of repeating customers
SELECT COUNT(Repeating_customer_unique_id) AS CountOfRepeatingCustomers
FROM
(SELECT  customer_unique_id AS Repeating_customer_unique_id
FROM `Target_Case_Study.customers`
GROUP BY customer_unique_id
HAVING COUNT(customer_id) > 1)

--Customers ordered from more than one state.
SELECT customer_unique_id AS customer_unique_id
FROM
(select distinct customer_unique_id,customer_state
from `Target_Case_Study.customers`)
group by customer_unique_id
having count(customer_unique_id)>1

--Get the % increase in the cost of orders from year 2017 to 2018 ( months between Jan to Aug only).
SELECT
Year
,Month
,((ROUND(SUM(CostOfOrder),2))) as Revenue
,CONCAT((ROUND(((ROUND(SUM(CostOfOrder),2))- (LAG(ROUND(SUM(CostOfOrder),2)) OVER(PARTITION BY Year ORDER BY Month)))/LAG(ROUND(SUM(CostOfOrder),2)) OVER(PARTITION BY Year ORDER BY Month) * 100,2)),"%") AS MonthOverMonthIncrease
FROM
(SELECT
order_purchase_timestamp
,EXTRACT(Year FROM order_purchase_timestamp) As Year
,EXTRACT(Month FROM order_purchase_timestamp) AS Month
,O.order_id,SUM(payment_value) AS CostOfOrder
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.payments` P ON O.order_id = P.order_id
WHERE EXTRACT(DATE FROM order_purchase_timestamp) BETWEEN "2017-01-01" AND "2017-08-31"
OR EXTRACT(DATE FROM order_purchase_timestamp) BETWEEN "2018-01-01" AND "2018-08-31"
GROUP BY order_purchase_timestamp,O.order_id
ORDER BY order_purchase_timestamp)
GROUP BY Year,Month
ORDER BY Year,Month

--Calculate the Total & Average value of order price for each state.
SELECT Distinct customer_state
,SUM(SUM(O.CostOfOrder))OVER(PARTITION BY customer_state) AS StateWiseRevenue
,ROUND(AVG(ROUND(SUM(O.CostOfOrder),2))OVER(PARTITION BY customer_state),2) AS avg_order_price
FROM
(SELECT
O.order_id
,O.customer_id
,ROUND(SUM(payment_value),2) AS CostOfOrder
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.payments` P ON O.order_id = P.order_id
GROUP BY O.order_id,O.customer_id
ORDER BY O.order_id,O.customer_id) O
LEFT JOIN `Target_Case_Study.customers` C ON C.customer_id = O.customer_id
GROUP BY customer_state,O.order_id
ORDER BY StateWiseRevenue DESC

--Calculate the Total & Average value of order freight for each state.
SELECT Distinct customer_state
,ROUND(SUM(SUM(O.freight))OVER(PARTITION BY customer_state),2) AS StateWiseTotalFreight
,ROUND(AVG(ROUND(SUM(O.freight),2))OVER(PARTITION BY customer_state),2) AS avg_order_freight
FROM
(SELECT
O.order_id
,O.customer_id
,ROUND(SUM(freight_value),2) AS freight
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.order_items` P ON O.order_id = P.order_id
GROUP BY O.order_id,O.customer_id
ORDER BY O.order_id,O.customer_id) O
LEFT JOIN `Target_Case_Study.customers` C ON C.customer_id = O.customer_id
GROUP BY customer_state,O.order_id
ORDER BY StateWiseTotalFreight DESC

--Find the no. of days taken to deliver each order from the orderâ€™s purchase date as delivery time.Also, calculate the difference (in days) between the estimated & actual delivery date of an order.
SELECT *
,TIMESTAMP_DIFF(order_delivered_customer_date,order_purchase_timestamp,DAY) AS time_to_deliver
,TIMESTAMP_DIFF(order_estimated_delivery_date,order_delivered_customer_date,DAY) AS diff_estimated_delivery
FROM `Target_Case_Study.orders`
WHERE order_status IN ('delivered')
AND order_delivered_customer_date IS NOT NULL
ORDER BY time_to_deliver

--Find out the top 5 states with the highest & lowest average freight value.
WITH AvgFreightData AS(SELECT *
FROM (SELECT Distinct customer_state
,ROUND(AVG(ROUND(SUM(O.freight),2))OVER(PARTITION BY customer_state),2) AS avg_order_freight
FROM
(SELECT
O.order_id
,O.customer_id
,ROUND(SUM(freight_value),2) AS freight
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.order_items` P ON O.order_id = P.order_id
GROUP BY O.order_id,O.customer_id
ORDER BY O.order_id,O.customer_id) O
LEFT JOIN `Target_Case_Study.customers` C ON C.customer_id = O.customer_id
GROUP BY customer_state,O.order_id)
ORDER BY avg_order_freight )
(Select *
,CONCAT(DENSE_RANK()OVER(ORDER BY avg_order_freight DESC)," Highest") AS Flag
FROM AvgFreightData
ORDER BY avg_order_freight DESC LIMIT 5)
UNION ALL
(Select *
,CONCAT(DENSE_RANK()OVER(ORDER BY avg_order_freight ASC)," Lowest") AS Flag
FROM AvgFreightData
ORDER BY avg_order_freight ASC LIMIT 5)


WITH orders AS(SELECT C.customer_state,O.order_id,O.customer_id,O.order_status,order_purchase_timestamp,order_delivered_customer_date,order_estimated_delivery_date
,TIMESTAMP_DIFF(order_delivered_customer_date,order_purchase_timestamp,DAY) AS time_to_deliver
,TIMESTAMP_DIFF(order_estimated_delivery_date,order_delivered_customer_date,DAY) AS diff_estimated_delivery
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.customers` C ON O.customer_id = C.customer_id
WHERE order_status IN ('delivered')
AND order_delivered_customer_date IS NOT NULL
ORDER BY time_to_deliver)


--Find out the top 5 states with the highest & lowest average delivery time.
(SELECT customer_state
,ROUND(SUM(time_to_deliver)/COUNT(order_id),2) AS avg_time_to_deliver
,CONCAT(ROW_NUMBER()OVER(ORDER BY (SUM(time_to_deliver)/COUNT(order_id)) DESC)," Highest") as Flag
FROM orders
GROUP BY customer_state
ORDER BY avg_time_to_deliver DESC LIMIT 5)
UNION ALL
(SELECT customer_state
,ROUND(SUM(time_to_deliver)/COUNT(order_id),2) AS avg_time_to_deliver
,CONCAT(ROW_NUMBER()OVER(ORDER BY (SUM(time_to_deliver)/COUNT(order_id)))," Lowest") as Flag
FROM orders
GROUP BY customer_state
ORDER BY avg_time_to_deliver LIMIT 5)

--Find out the top 5 states where the order delivery is really fast as compared to the estimated date of delivery.
WITH orders AS(SELECT C.customer_state,O.order_id,O.customer_id,O.order_status,order_purchase_timestamp,order_delivered_customer_date,order_estimated_delivery_date
,TIMESTAMP_DIFF(order_delivered_customer_date,order_purchase_timestamp,DAY) AS time_to_deliver
,TIMESTAMP_DIFF(order_estimated_delivery_date,order_delivered_customer_date,DAY) AS diff_estimated_delivery
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.customers` C ON O.customer_id = C.customer_id
WHERE order_status IN ('delivered')
AND order_delivered_customer_date IS NOT NULL
ORDER BY diff_estimated_delivery DESC)
(SELECT customer_state AS Fastest_DeliveryCustomer_States
,ROUND(SUM(diff_estimated_delivery)/COUNT(order_id),2) AS DeliveryWithinDays
FROM orders
GROUP BY customer_state
ORDER BY DeliveryWithinDays ASC LIMIT 5)



--Find the month on month no. of orders placed using different payment types.
SELECT payment_type,year,Month,SUM(CntOfOrders) AS OrderCount
,CONCAT(ROUND((((SUM(CntOfOrders))-LAG(SUM(CntOfOrders))OVER(PARTITION BY payment_type,year ORDER BY year,Month))/LAG(SUM(CntOfOrders))OVER(PARTITION BY payment_type,year ORDER BY year,Month))*100,2),"%") AS MoMGrowthOnOrders
FROM
(SELECT payment_type
,EXTRACT(Year FROM O.order_purchase_timestamp) AS Year
,EXTRACT(Month FROM O.order_purchase_timestamp) AS Month
,(COUNT(Distinct O.order_id)) AS CntOfOrders
FROM `Target_Case_Study.orders` O
left join `Target_Case_Study.payments`  P ON P.order_id = O.order_id
where payment_type is not null
Group by payment_type,year,month
Order by payment_type,year,month)
GROUP BY payment_type,year,Month
ORDER BY payment_type,year,Month

--Find the no. of orders placed on the basis of the payment installments that have been paid.
SELECT payment_installments,count(order_id) as CntOfOrders
FROM `Target_Case_Study.payments`
GROUP BY payment_installments
ORDER BY payment_installments

--Orders with EMIâ€™s and Non-EMIâ€™s
WITH payments AS(SELECT P.order_id,payment_sequential,payment_type,payment_installments,payment_value
,case when P1.order_id is null
     THEN 'NO'
     ELSE 'YES' END AS EMI_Flag
FROM `Target_Case_Study.payments`  P
LEFT JOIN (select distinct order_id from `Target_Case_Study.payments`
where order_id IN (select order_id
from `Target_Case_Study.payments`
group by order_id
Having count(order_id)>1)) P1 ON P.order_id = P1.order_id)

SELECT emi_flag,COUNT(Distinct order_id),ROUND(SUM(payment_value),2) AS Revenue
from payments
group by emi_flag


--Count of order based on review
select review_score,COUNT(Distinct O.order_id) as orderCnt
FROM `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.order_reviews` R ON R.order_id = O.order_id
Group by review_score
Order by review_score


--Count of orders and revenue of each sellers
select seller_id ,count(Distinct O.order_id) as SellerOrderCount,ROUND(SUM(price + freight_value),2) AS revenue
from `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.order_items` OI ON OI.order_id = O.order_id
GROUP BY seller_id
ORDER BY SellerOrderCount DESC


--State Wise Seller Order Count and Revenue
select S.seller_state 
,COUNT(DISTINCT S.seller_id) AS SellerCnt
,count(Distinct O.order_id) as SellerOrderCount
,ROUND(SUM(price + freight_value),2) AS revenue
from `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.order_items` OI ON OI.order_id = O.order_id
LEFT JOIN `Target_Case_Study.sellers` S ON S.seller_id = OI.seller_id
GROUP BY S.seller_state
ORDER BY SellerOrderCount DESC


--Orders which are placed but not flowing in order_items table.
select Distinct O.Order_id,O.order_purchase_timestamp,O.order_delivered_customer_date,O.order_status,OI.*,P.*
from `Target_Case_Study.orders` O
LEFT JOIN `Target_Case_Study.order_items` OI ON OI.order_id = O.order_id
LEFT JOIN `Target_Case_Study.payments` P ON P.order_id = O.order_id
where OI.order_id is null
and order_status IN ('created','shipped','unavailable')








